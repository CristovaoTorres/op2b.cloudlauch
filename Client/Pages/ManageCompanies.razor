@page "/ManageCompanies"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize(Roles = Platform.Shared.ROLES.ADMINISTRATOR_NAME)]
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h3>Empresas</h3>


<table class="table">
    <thead>
        <tr>
            <th>Empresa</th>
            <th>Total Usuários</th>
            <th>Total VMs</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Companies == null)
        {
            <div class="spinner"></div>
        }
        else
        {
            if (!Companies.Any())
            {
                <p><em>Nenhum usuario encontrado</em></p>
            }
            else
            {
                @foreach (var company in Companies)
                {
                    <tr>
                        <td>@company.Name</td>

                        <td>@company.Users.Count()</td>

                        <td>@company.TotalVMs</td>

                        <td>
                            <button class="btn btn-secondary"
                                    @onclick="(() => EditVirtualMachines(company))">
                                Gerenciar VMs
                            </button>
                        </td>

                        <td>

                            <button class="btn btn-primary"
                                    @onclick="(() => Edit(company   ))">
                                Editar
                            </button>
                        </td>
                    </tr>
                }
            }
        }

    </tbody>
</table>
@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Dados da empresa</h3>

                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>

                <div class="modal-body" >


                    @if (selectedCompany.Name != null)
                    {
                        <p>@selectedCompany.Name</p>
                    }

                    <label>Empresa:</label>
                    <input class="form-control" type="text" placeholder="Nome da empresa" @bind="selectedCompany.Name" />

                    <br /><br />

                    <label>Usuários:</label>
                    <div class="multiselect">
                        <div id="checkboxes">
                            @foreach (var item in this.AllUsers)
                            {
                                <div>
                                    <label for="@item.Id">
                                        @if (CompanyIdUsers.Contains(item.Id))
                                        {
                                            <input type="checkbox" id="@item.Id" checked="checked" @onchange="@((e) => CheckboxChanged(e, item.Id))" />
                                        }
                                        else
                                        {
                                            <input type="checkbox" id="@item.Id" @onchange="@((e) => CheckboxChanged(e, item.Id))" />
                                        }
                                        &nbsp;@item.FullName
                                    </label>
                                </div>
                            }
                        </div>
                    </div>

                    <br /><br />


                    <button class="btn btn-primary"
                            @onclick="Save">
                        Salvar
                    </button>  &nbsp;

                    @if (selectedCompany.Id > 0)
                    {

                        <button class="btn btn-danger"
                                @onclick="Delete">
                            Excluir
                        </button>
                    }
                    <br />
                    <span style="color:red">@mensagemErro</span>
                    <span style="color:green">@mensagemSucesso</span>
                </div>
            </div>
        </div>
    </div>
}


@if (Companies != null)
{
    <button class="btn btn-success" @onclick="AddNewUser">Nova empresa</button>
}




@code {

    private bool canShowAddButton = false;
    private List<CompanyModel> Companies;
    private CompanyModel selectedCompany;

    /// <summary>
    /// Relacao de todos os usuarios existentes no cadastro da Op2b.
    /// </summary>
    private List<UserModel> AllUsers;

    /// <summary>
    /// Usuarios que trabalham na empresa em edicao.
    /// </summary>
    private List<string> CompanyIdUsers = new List<string>();

    private string mensagemErro;
    private string CurrentUserRole;
    private string mensagemSucesso;
    private bool ShowPopup;
    private List<RoleModel> Roles;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            mensagemSucesso = "";
            mensagemErro = "";

            var companiesTask = Http.GetFromJsonAsync<List<CompanyModel>>("ManageCompany");
            var usersTask = Http.GetFromJsonAsync<List<UserModel>>("Account");

            await Task.WhenAll(usersTask, companiesTask);

            Companies = await companiesTask;
            AllUsers = await usersTask;

            canShowAddButton = true;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            mensagemErro = ex.ToString();
        }
    }



    private void CheckboxChanged(ChangeEventArgs e, string key)
    {
        var i = this.AllUsers.FirstOrDefault(i => i.Id == key);
        if (i != null)
        {
            if ((bool)e.Value)
            {
                CompanyIdUsers.Add(key);
            }
            else
            {
                CompanyIdUsers.Remove(key);
            }

        }
    }

    public void EditVirtualMachines(CompanyModel userObj)
    {
        NavigationManager.NavigateTo($"managevirtualmachines/{userObj.Id}");
    }
    public async Task Edit(CompanyModel userObj)
    {
        try
        {
            mensagemSucesso = "";
            mensagemErro = "";
            selectedCompany = userObj;
            CompanyIdUsers = selectedCompany.Users.Select(f => f.Id).ToList();
            ShowPopup = true;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            mensagemErro = ex.ToString();
        }
    }

    void AddNewUser()
    {
        selectedCompany = new CompanyModel();
        selectedCompany.Id = 0;
        selectedCompany.Name = "";
        selectedCompany.Users = new List<UserModel>();
        ShowPopup = true;
    }


    async Task Save()
    {
        try
        {
            mensagemSucesso = "";
            mensagemErro = "";
            selectedCompany.Users = AllUsers.Where(f => CompanyIdUsers.Contains(f.Id)).ToList();

            if (selectedCompany.Id == 0) //adiciona nova empresa
            {
                //selectedCompany.Roles = new List<string> { CurrentUserRole };

                var responseMessage = await Http.PostAsJsonAsync<CompanyModel>("ManageCompany", selectedCompany);
                var response = await responseMessage.ConvertTo<ResponseBase<int>>();
                if (response.Success)
                {
                    selectedCompany.Id = response.Item;
                    Companies.Add(selectedCompany);
                    mensagemSucesso = "Empresa adicionada com sucesso";
                    ShowPopup = false;
                }
                else
                {
                    mensagemErro = response.ToErrorMessage();
                }
            }
            else //atualiza usuario existente
            {

                var responseMessage = await Http.PutAsJsonAsync<CompanyModel>("ManageCompany", selectedCompany);
                var response = await responseMessage.ConvertTo<ResponseBase>();
                if (response.Success)
                {
                    mensagemSucesso = "Empresa atualizada com sucesso";
                    ShowPopup = false;
                }
                else
                {
                    mensagemErro = response.ToErrorMessage();
                }
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            mensagemErro = ex.ToString();
        }


    }

    async Task Delete()
    {
        try
        {
            var responseMessage = await Http.DeleteAsync($"ManageCompany?id={selectedCompany.Id}");
            var response = await responseMessage.ConvertTo<ResponseBase>();
            if (response.Success)
            {
                Companies.Remove(selectedCompany);
                mensagemSucesso = "Empresa excluida com sucesso!";
                ShowPopup = false;
            }
            else
            {
                mensagemErro = response.ToErrorMessage();
            }

        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            mensagemErro = ex.ToString();
        }
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }


}
